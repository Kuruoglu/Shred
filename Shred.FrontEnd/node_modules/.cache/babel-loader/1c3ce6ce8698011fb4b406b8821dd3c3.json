{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\Shrad\\\\src\\\\components\\\\Calendar\\\\components\\\\AreaOfMonth.js\";\nimport React from \"react\";\nimport moment from \"moment\";\nimport PropTypes from 'prop-types';\nimport styles from \"./AreaOfMonth.module.sass\";\nimport arrowUp from \"../../../assets/img/chevron-up.png\";\nimport arrowDown from \"../../../assets/img/chevron-down.png\";\nimport { connect } from 'react-redux';\nimport * as action from '../../../redux/action/ActionCreators';\n\nfunction AreaOfMonth({\n  renderWeekMonth,\n  currentMonth,\n  changePrevMonth,\n  changeNextMonth,\n  isOpen,\n  activeMonth,\n  currentStateMonth\n}) {\n  console.log(changeIsOpen);\n  const clonState = moment(currentStateMonth);\n  const firstDayWeek = currentMonth.startOf('week').format(\"D\");\n  const lastDayWeek = currentMonth.endOf('week').format(\"D\");\n  const textPrew = 'Prew';\n  const textNext = 'Next';\n  const prewMonth = clonState.add(-1, \"M\").format(\"MMM\");\n  const curMonth = currentStateMonth.format(activeMonth ? \"MMMM\" : `MMM ${firstDayWeek} - ${lastDayWeek} `);\n  const nextMonth = clonState.add(2, \"M\").format(\"MMM\");\n  const daysWeek = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"];\n\n  const renderWeekDays = (item, key) => {\n    return React.createElement(\"div\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, item);\n  };\n\n  return React.createElement(\"div\", {\n    className: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: styles.containerIn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: styles.textMonth,\n    onClick: changePrevMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, activeMonth ? prewMonth : textPrew), React.createElement(\"div\", {\n    className: styles.current,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    onClick: renderWeekMonth,\n    className: styles.active,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, curMonth), React.createElement(\"img\", {\n    onClick: renderWeekMonth,\n    className: styles.arrow,\n    src: isOpen ? arrowUp : arrowDown,\n    alt: \"arrow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: styles.textMonth,\n    onClick: changeNextMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, activeMonth ? nextMonth : textNext)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, !isOpen && React.createElement(\"div\", {\n    className: styles.daysWeek,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, daysWeek.map(renderWeekDays))));\n}\n\nAreaOfMonth.defaultProps = {\n  renderWeekMonth: () => {},\n  currentMonth: moment(),\n  currentStateMonth: () => {},\n  changePrevMonth: () => {},\n  changeNextMonth: () => {},\n  isOpen: false,\n  activeMonth: true\n};\nAreaOfMonth.propTypes = {\n  renderWeekMonth: PropTypes.func.isRequired,\n  currentStateMonth: PropTypes.object.isRequired,\n  changePrevMonth: PropTypes.func.isRequired,\n  changeNextMonth: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  activeMonth: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = store => ({\n  isOpen: store.reducer.isOpen\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeIsOpen: () => dispatch(action.openTabWeekMonthAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AreaOfMonth);","map":{"version":3,"sources":["D:/React/Shrad/src/components/Calendar/components/AreaOfMonth.js"],"names":["React","moment","PropTypes","styles","arrowUp","arrowDown","connect","action","AreaOfMonth","renderWeekMonth","currentMonth","changePrevMonth","changeNextMonth","isOpen","activeMonth","currentStateMonth","console","log","changeIsOpen","clonState","firstDayWeek","startOf","format","lastDayWeek","endOf","textPrew","textNext","prewMonth","add","curMonth","nextMonth","daysWeek","renderWeekDays","item","key","container","containerIn","textMonth","current","active","arrow","map","defaultProps","propTypes","func","isRequired","object","bool","mapStateToProps","store","reducer","mapDispatchToProps","dispatch","openTabWeekMonthAction"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport PropTypes  from 'prop-types';\r\nimport styles from \"./AreaOfMonth.module.sass\";\r\nimport arrowUp from \"../../../assets/img/chevron-up.png\";\r\nimport arrowDown from \"../../../assets/img/chevron-down.png\";\r\nimport {connect} from 'react-redux'; \r\nimport * as action from '../../../redux/action/ActionCreators'\r\n\r\n\r\nfunction AreaOfMonth({renderWeekMonth, currentMonth, changePrevMonth, changeNextMonth, isOpen, activeMonth, currentStateMonth}) {\r\n  console.log(changeIsOpen)\r\n  const clonState = moment(currentStateMonth)\r\n  const firstDayWeek = currentMonth.startOf('week').format(\"D\");\r\n  const lastDayWeek = currentMonth.endOf('week').format(\"D\");\r\n  const textPrew = 'Prew';\r\n  const textNext = 'Next';\r\n  const prewMonth = clonState.add(-1, \"M\").format(\"MMM\");\r\n  const curMonth = currentStateMonth.format(activeMonth ? \"MMMM\" : `MMM ${firstDayWeek} - ${lastDayWeek} `);\r\n  const nextMonth = clonState.add(2, \"M\").format(\"MMM\");\r\n  const daysWeek = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"];\r\n\r\n  const renderWeekDays = (item, key) => {\r\n    return <div key={key}>{item}</div>;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.containerIn}>\r\n        <p className={styles.textMonth} onClick={changePrevMonth}>\r\n          {activeMonth ? prewMonth : textPrew}\r\n        </p>\r\n        <div className={styles.current}>\r\n          <p onClick={renderWeekMonth} className={styles.active}>\r\n            {curMonth}\r\n          </p>\r\n          <img\r\n            onClick={renderWeekMonth}\r\n            className={styles.arrow}\r\n            src={isOpen ? arrowUp : arrowDown}\r\n            alt=\"arrow\"\r\n          />\r\n        </div>\r\n          <p className={styles.textMonth} onClick={changeNextMonth}>\r\n            {activeMonth ? nextMonth : textNext}\r\n          </p>\r\n      </div>\r\n      <div>\r\n        {!isOpen && (\r\n          <div className={styles.daysWeek}>{daysWeek.map(renderWeekDays)}</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nAreaOfMonth.defaultProps = {\r\n  renderWeekMonth: () => {},\r\n  currentMonth: moment(),\r\n  currentStateMonth: () => {},\r\n  changePrevMonth: () => {},\r\n  changeNextMonth: () => {},\r\n  isOpen: false,\r\n  activeMonth: true\r\n};\r\n\r\nAreaOfMonth.propTypes = {\r\n  renderWeekMonth: PropTypes.func.isRequired,\r\n  currentStateMonth: PropTypes.object.isRequired,\r\n  changePrevMonth: PropTypes.func.isRequired,\r\n  changeNextMonth: PropTypes.func.isRequired,\r\n  isOpen: PropTypes.bool.isRequired,\r\n  activeMonth: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = (store) => ({\r\n  isOpen: store.reducer.isOpen\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    changeIsOpen: () => dispatch(action.openTabWeekMonthAction())\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AreaOfMonth);\r\n"]},"metadata":{},"sourceType":"module"}